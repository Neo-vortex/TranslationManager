@page "/translations/add"
@using System.Globalization
@using TranslationManager.Models
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager

<PageTitle>Add Translation</PageTitle>

<h1>Add New Translation</h1>

<EditForm Model="@newTranslation" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="key" class="form-label">Key</label>
        <InputText id="key" @bind-Value="newTranslation.Key" class="form-control" />
        <ValidationMessage For="@(() => newTranslation.Key)" />
    </div>

    <div class="mb-3">
        <h4>Translation Values</h4>
        @for (var i = 0; i < translationValues.Count; i++)
        {
            var index = i; // Capture loop variable
            <div class="card mb-3">
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Culture</label>
                        <select @bind="translationValues[index].Culture" class="form-select">
                            <option value="">Select Culture</option>
                            @foreach (var culture in availableCultures)
                            {
                                <option value="@culture.Name">@culture.DisplayName</option>
                            }
                        </select>
                        <ValidationMessage For="@(() => translationValues[index].Culture)" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Value</label>
                        <InputText @bind-Value="translationValues[index].Value" class="form-control" />
                        <ValidationMessage For="@(() => translationValues[index].Value)" />
                    </div>
                    <button type="button" @onclick="() => RemoveValue(index)" class="btn btn-danger btn-sm">
                        Remove
                    </button>
                </div>
            </div>
        }

        <button type="button" @onclick="AddValue" class="btn btn-secondary">
            Add Language Value
        </button>
    </div>

    <div class="mt-4">
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" @onclick="Cancel" class="btn btn-outline-secondary ms-2">
            Cancel
        </button>
    </div>
</EditForm>

@code {
    private Translation newTranslation = new();
    private List<TranslationValue> translationValues = new();

    private readonly List<CultureInfo> availableCultures = new()
    {
        new CultureInfo("fa-IR"),
        new CultureInfo("en-US"),
        new CultureInfo("es-ES"),
        new CultureInfo("fr-FR"),
        new CultureInfo("de-DE"),
        new CultureInfo("it-IT"),
        new CultureInfo("pt-PT"),
        new CultureInfo("ru-RU"),
        new CultureInfo("zh-CN"),
        new CultureInfo("ja-JP"),
        new CultureInfo("ar-SA")
    };

    protected override void OnInitialized()
    {
        AddValue();
    }

    private void AddValue()
    {
        translationValues.Add(new TranslationValue());
    }

    private void RemoveValue(int index)
    {
        translationValues.RemoveAt(index);
    }

    private async Task HandleValidSubmit()
    {
        newTranslation.Values = translationValues.Where(v => !string.IsNullOrEmpty(v.Culture)).ToList();
        DbContext.Translations.Add(newTranslation);
        await DbContext.SaveChangesAsync();
        NavigationManager.NavigateTo("/translations");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/translations");
    }
}